plugins {
    id 'com.android.library'
}
apply plugin: 'com.google.protobuf'

android {
    compileSdkVersion app_android.compileSdkVersion
    buildToolsVersion app_android.buildToolsVersion

    defaultConfig {
        minSdkVersion app_android.minSdkVersion
        targetSdkVersion app_android.targetSdkVersion
        versionCode app_android.versionCode
        versionName app_android.versionName

        testInstrumentationRunner app_android.testInstrumentationRunner
        consumerProguardFiles "consumer-rules.pro"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [ AROUTER_MODULE_NAME  : project.getName() ]
            }
        }
    }

    sourceSets {
        main {
            if(!isRelease){
                // 如果是组件化模式，需要单独运行时
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            }else {
                // 集成化模式，整个项目打包
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }

            java {
                srcDir 'src/main/java'
            }
            proto {
                srcDir 'src/main/proto' //指定.proto文件路径
            }
        }
    }

    buildTypes {
        debug {
            buildConfigField("String", "WEBSOCKET_URL", "\"${app_server_url.wsdebug}\"")
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String", "WEBSOCKET_URL", "\"${app_server_url.wsrelease}\"")
        }
    }

    compileOptions {
        sourceCompatibility app_android.sourceCompatibility
        targetCompatibility app_android.targetCompatibility
    }
}

dependencies {
    annotationProcessor app_annotationProcessors.arouter_compiler
    app_dependencies.each {k, v ->
        // api方式引入，其他模块在引入common时才会生效
        api v
        println('引入依赖: ' + k + " -> " + v)
    }

    app_onlydebug_tools_dependencies.each {k, v ->
        debugImplementation v
        println('Debug Tools: ' + k + " -> " + v)
    }


    api "com.google.protobuf:protobuf-java:3.10.0"
    api "com.google.protobuf:protoc:3.17.0"
}


protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.17.0' // 也可以配置本地编译器路径
    }

    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
            }
            task.builtins {
                java {}// 生产java源码
            }
        }
    }
}